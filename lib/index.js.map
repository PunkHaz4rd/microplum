{"version":3,"sources":["lib/index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import { Config, DefaultConfig, Entity, Microplum } from \"./model\";\n\nimport * as _ from \"lodash\";\nimport * as seneca from \"seneca\";\nimport * as senecaAmqpTransport from \"seneca-amqp-transport\";\nimport { PlumError, ServerPlumError, TimeoutPlumError } from \"./error\";\n\n/**\n * Seneca interface for updating with non specified seneca methods\n */\ninterface Seneca extends seneca.Instance {\n    /**\n     * Close connection to the queue. Use it on closing the app to be sure that no zombie connections have stayed.\n     */\n    close(): void;\n}\n\n/**\n * get current environment value\n */\nconst currentEnvironment = () => process.env.NODE_ENV || \"production\";\n\n/**\n * Default options value for the microplum\n * @type {DefaultConfig}\n */\nconst DEFAULT_OPTIONS: DefaultConfig = {\n    version: 1,\n    subversion: 0,\n    revision: 0,\n    environment: currentEnvironment(),\n    pin: [],\n    clientPin: `provider:*,version:*,subversion:*,revision:*,role:*,environment:${currentEnvironment()}`,\n    seneca: {\n        log: \"standard\",\n        transport: {},\n        timeout: 5000\n    },\n};\n\nexport class SenecaPlum implements Microplum {\n\n    public seneca: Seneca;\n\n    constructor(public options: Config) {\n        this.options = _.merge(DEFAULT_OPTIONS, options);\n        this.options.seneca.transport.msgprefix = this.options.seneca.transport.msgprefix || this.options.app;\n        this.initSeneca();\n    }\n\n    public close(): void {\n        this.seneca.close();\n        console.log(`[Microplum] Closing the connections.`);\n    }\n\n    public listen(): void {\n        this.seneca.listen({\n            type: \"amqp\",\n            pin: this.options.pin,\n            url: this.options.amqpUrl\n        });\n    }\n\n    /**\n     * Set-up seneca connection\n     */\n    public client(): void {\n        this.seneca.client({\n            type: 'amqp',\n            pin: this.options.clientPin,\n            url: this.options.amqpUrl\n        });\n        console.log(`[Microplum] Registered client for PIN: ${this.options.clientPin}`);\n    }\n\n    public act(pin: any, respond: seneca.ActCallback): void {\n        this.addBasicProperties(pin);\n        this.addAdditionalProperties(pin);\n        this.seneca.act(pin, respond);\n    }\n\n    public actPromise(pin: any, user?: any): Promise<any> {\n        console.log(`[Microplum] CALL => ${JSON.stringify(pin)}`);\n        if (user) {\n            pin.user = user;\n        }\n        if (user && (user.id || user.sub)) {\n            pin.userId = (user.id) ? user.id : `${user.iss || \"\"}${user.sub || \"\"}`;\n        }\n        if (user && user.name) {\n            pin.userName = user.name;\n        }\n        //pin[\"fatal$\"] = pin[\"fatal$\"] || false; // all errors are not fatal errors\n        //pin[\"default$\"] = pin[\"default$\"] || {test:\"test value\"}; // default value when not found the pin\n        //pin[\"timeout$\"] = 2000; // override global timeout\n        return new Promise((resolve, reject) => {\n            // set timeout to invalidate request\n            let timeout = setTimeout(() => {\n                clearTimeout(timeout);\n                this.seneca.close(); // close the connection\n                reject(new TimeoutPlumError(\"Internal timeout during aceessing the service\"));\n            }, this.options.seneca.timeout - 100);\n\n            this.act(pin, (err, data) => {\n                clearTimeout(timeout);\n                if (err) {\n                    console.log(`[Microplum] ERR <= ${JSON.stringify(pin)}`);\n                    console.error(err);\n                    return reject(err);\n                } else {\n                    console.log(`[Microplum] ANSWER [status:${(data) ? data.status : ''}] <= ${JSON.stringify(pin)}`);\n                    if (data && typeof data.status === \"boolean\") {\n                        if (data.status) {\n                            return resolve(data.data);\n                        } else if (data.error) {\n                            return reject(data.error);\n                        } else {\n                            return reject(data);\n                        }\n                    } else {\n                        console.log(\"[Microplum] ANSWER unknown type: resolving data\");\n                        return resolve(data);\n                    }\n                }\n            });\n        });\n    }\n\n    public useService(service: Entity, pin?: any): void {\n        service.setAct(this.actPromise.bind(this));\n        this.use(service.plugin(), pin || service.publicPin());\n    }\n\n    public use(component: Function, pin?: any): void {\n        component.bind(this)(this.options);\n        if (pin) {\n            this.addPin(pin);\n        }\n    }\n\n    public add(pin: any, cb: seneca.AddCallback): void {\n        pin = this.addBasicProperties(pin);\n        pin = this.addAdditionalProperties(pin);\n        this.seneca.add(pin, this.encloseCallback(cb));\n        console.log(`[Microplum] Registered service for PIN: ${JSON.stringify(pin)}`);\n    }\n\n    private escapeDoc(doc: any): any {\n        if (Array.isArray(doc)) {\n            return doc.map(docElement => this.escapeDoc(docElement));\n        } else if (doc && doc.toObject) {\n            return doc.toObject();\n        } else if (doc) {\n            return doc;\n        } else {\n            return null;\n        }\n    }\n\n    protected encloseCallback(cb: Function): seneca.AddCallback {\n        return <seneca.AddCallback>(async (pin, done): Promise<void> => {\n            try {\n                let doc: any = await cb(pin, done);\n                done(null, { status: true, data: this.escapeDoc(doc) });\n            } catch (err) {\n                if (err instanceof PlumError) {\n                    done(null, { status: false, error: err });\n                } else {\n                    done(null, { status: false, error: new ServerPlumError(err.message) });\n                }\n            }\n        });\n    }\n\n    protected addPin(pin: any): void {\n        pin = this.addBasicProperties(pin);\n        pin.provider = \"*\";\n        let realPin: string = Object.keys(pin)\n            .filter(key => pin[key] !== undefined)\n            .map(key => `${key}:${pin[key]}`)\n            .join(\",\");\n\n        console.log(`[Microplum] Register listen for PIN: \\\"${realPin}\\\"`);\n        this.options.pin.push(realPin);\n    }\n\n    protected addBasicProperties(pin: any): any {\n        pin.provider = pin.provider || this.options.provider || this.options.app;\n        pin.version = pin.version || this.options.version;\n        pin.subversion = pin.subversion || this.options.subversion;\n        pin.revision = pin.revision || this.options.revision;\n        pin.environment = pin.environment || this.options.environment;\n        return pin;\n    }\n\n    protected addAdditionalProperties(pin: any): any {\n        if (this.options.debugUserId) {\n            pin.userId = this.options.debugUserId;\n        }\n        return pin;\n    }\n\n    /**\n     * Set-up seneca with all the middleware libraries.\n     */\n    protected initSeneca(): void {\n        this.seneca = <Seneca>seneca(this.options.seneca);\n        this.seneca.use(senecaAmqpTransport);\n    }\n\n}\n"]}