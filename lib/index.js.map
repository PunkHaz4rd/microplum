{"version":3,"sources":["lib/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,0BAA4B;AAC5B,+BAAiC;AACjC,2DAA6D;AAC7D,iCAAoE;AAYpE;;GAEG;AACH,IAAM,kBAAkB,GAAG,cAAM,OAAA,OAAO,CAAC,GAAG,CAAC,QAAQ,IAAI,YAAY,EAApC,CAAoC,CAAC;AAEtE;;;GAGG;AACH,IAAM,eAAe,GAAkB;IACnC,OAAO,EAAE,CAAC;IACV,UAAU,EAAE,CAAC;IACb,QAAQ,EAAE,CAAC;IACX,WAAW,EAAE,kBAAkB,EAAE;IACjC,GAAG,EAAE,EAAE;IACP,SAAS,EAAE,qEAAmE,kBAAkB,EAAI;IACpG,MAAM,EAAE;QACJ,kBAAkB;QAClB,SAAS,EAAE,EAAE;QACb,OAAO,EAAE,KAAK;KACjB;CACJ,CAAC;AAEF;IAII,oBAAmB,OAAe;QAAf,YAAO,GAAP,OAAO,CAAQ;QAC9B,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC,KAAK,CAAC,eAAe,EAAE,OAAO,CAAC,CAAC;QACjD,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,SAAS,CAAC,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,SAAS,CAAC,SAAS,IAAI,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC;QACtG,IAAI,CAAC,UAAU,EAAE,CAAC;IACtB,CAAC;IAEM,0BAAK,GAAZ;QACI,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;QACpB,OAAO,CAAC,GAAG,CAAC,sCAAsC,CAAC,CAAC;IACxD,CAAC;IAEM,2BAAM,GAAb;QACI,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;YACf,IAAI,EAAE,MAAM;YACZ,GAAG,EAAE,IAAI,CAAC,OAAO,CAAC,GAAG;YACrB,GAAG,EAAE,IAAI,CAAC,OAAO,CAAC,OAAO;YACzB,QAAQ,EAAE;gBACN,gBAAgB;gBAChB,IAAI,EAAE,cAAc;gBACpB,OAAO,EAAE;oBACL,OAAO,EAAE,KAAK;oBACd,UAAU,EAAE,IAAI;iBACnB;aACJ;YACD,UAAU,EAAE;gBACR;;oBAEI;gBACJ,QAAQ,EAAE;oBACN,gBAAgB;oBAChB,qBAAqB;oBACrB,OAAO,EAAE;wBACL,OAAO,EAAE,IAAI;wBACb,UAAU,EAAE,KAAK;qBACpB;iBACJ;aACJ;YACD,MAAM,EAAE;gBACJ;;oBAEI;gBACJ,MAAM,EAAE;oBACJ,uBAAuB;oBACvB,iBAAiB;oBACjB,OAAO,EAAE;wBACL,OAAO,EAAE,KAAK;wBACd,SAAS,EAAE;4BACP,yCAAyC;4BACzC,eAAe,EAAE,KAAK;yBACzB;qBACJ;iBACJ;aACJ;YACD,MAAM,EAAE;gBACJ;;oBAEI;gBACJ,MAAM,EAAE;oBACJ,uBAAuB;oBACvB,iBAAiB;oBACjB,OAAO,EAAE;wBACL,UAAU,EAAE,IAAI;wBAChB,SAAS,EAAE,IAAI;wBACf,SAAS,EAAE;4BACP,yCAAyC;4BACzC,eAAe,EAAE,KAAK;yBACzB;qBACJ;iBACJ;aACJ;SACJ,CAAC,CAAC;IACP,CAAC;IAED;;OAEG;IACI,2BAAM,GAAb;QACI,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;YACf,IAAI,EAAE,MAAM;YACZ,GAAG,EAAE,IAAI,CAAC,OAAO,CAAC,SAAS;YAC3B,GAAG,EAAE,IAAI,CAAC,OAAO,CAAC,OAAO;YACzB,QAAQ,EAAE;gBACN,gBAAgB;gBAChB,IAAI,EAAE,cAAc;gBACpB,OAAO,EAAE;oBACL,OAAO,EAAE,KAAK;oBACd,UAAU,EAAE,IAAI;iBACnB;aACJ;YACD,UAAU,EAAE;gBACR;;qBAEK;gBACL,QAAQ,EAAE;oBACN,gBAAgB;oBAChB,qBAAqB;oBACrB,OAAO,EAAE;wBACL,OAAO,EAAE,IAAI;wBACb,UAAU,EAAE,KAAK;qBACpB;iBACJ;aACJ;YACD,MAAM,EAAE;gBACJ;;qBAEK;gBACL,MAAM,EAAE;oBACJ,uBAAuB;oBACvB,iBAAiB;oBACjB,OAAO,EAAE;wBACL,OAAO,EAAE,KAAK;wBACd,SAAS,EAAE;4BACP,yCAAyC;4BACzC,eAAe,EAAE,KAAK;yBACzB;qBACJ;iBACJ;aACJ;YACD,MAAM,EAAE;gBACJ;;qBAEK;gBACL,MAAM,EAAE;oBACJ,uBAAuB;oBACvB,iBAAiB;oBACjB,OAAO,EAAE;wBACL,UAAU,EAAE,IAAI;wBAChB,SAAS,EAAE,IAAI;wBACf,SAAS,EAAE;4BACP,yCAAyC;4BACzC,eAAe,EAAE,KAAK;yBACzB;qBACJ;iBACJ;aACJ;SACJ,CAAC,CAAC;QACH,OAAO,CAAC,GAAG,CAAC,4CAA0C,IAAI,CAAC,OAAO,CAAC,SAAW,CAAC,CAAC;IACpF,CAAC;IAEM,8BAAS,GAAhB,UAAiB,GAAQ;QACrB,GAAG,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC;QAC7B,EAAE,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC;YACZ,GAAG,CAAC,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QAC1C,CAAC;QACD,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;YACV,GAAG,CAAC,GAAG,GAAG,KAAK,CAAC;QACpB,CAAC;QACD,EAAE,CAAC,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC;YACjB,EAAE,CAAC,CAAC,GAAG,CAAC,UAAU,CAAC,MAAM,GAAG,EAAE,CAAC,CAAC,CAAC;gBAC7B,GAAG,CAAC,UAAU;oBACP,GAAG,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,EAAC,CAAC,CAAC,YAAO,GAAG,CAAC,UAAU,CAAC,MAAM,CAAC,GAAG,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC,MAAG,CAAC;YAChG,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;gBACnC,GAAG,CAAC,UAAU,GAAG,SAAO,GAAG,CAAC,UAAU,CAAC,MAAM,CAAC,GAAG,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,CAAG,CAAC;YAC/E,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,GAAG,CAAC,UAAU,GAAG,MAAM,CAAC;YAC5B,CAAC;QACL,CAAC;QACD,MAAM,CAAC,GAAG,CAAC;IACf,CAAC;IAEM,wBAAG,GAAV,UAAW,GAAQ,EAAE,OAA2B;QAC5C,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,CAAC;QAC7B,IAAI,CAAC,uBAAuB,CAAC,GAAG,CAAC,CAAC;QAClC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;IAClC,CAAC;IAEM,+BAAU,GAAjB,UAAkB,GAAQ,EAAE,IAAU;QAAtC,iBA2CC;QA1CG,OAAO,CAAC,GAAG,CAAC,yBAAuB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAG,CAAC,CAAC;QAC1E,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,IAAI,OAAO,GAAG,CAAC,IAAI,KAAK,QAAQ,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,OAAO,GAAG,CAAC,GAAG,KAAK,QAAQ,CAAC,CAAC,CAAC;YACvF,MAAM,IAAI,2BAAmB,CAAC,sEAAsE;iBAChG,QAAM,IAAI,CAAC,SAAS,CAAC,GAAG,CAAG,CAAA,CAAC,CAAC;QACrC,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAChD,MAAM,IAAI,2BAAmB,CAAC,oCAAoC;iBAC3D,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,YAAO,IAAI,CAAC,SAAS,CAAC,GAAG,CAAG,CAAA,CAAC,CAAC;QAC3E,CAAC;QACD,uBAAuB;QACvB,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;YACP,GAAG,CAAC,IAAI,GAAG,IAAI,CAAC;QACpB,CAAC;QACD,EAAE,CAAC,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;YAChC,GAAG,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,MAAG,IAAI,CAAC,GAAG,IAAI,EAAE,KAAG,IAAI,CAAC,GAAG,IAAI,EAAE,CAAE,CAAC;QAC5E,CAAC;QACD,EAAE,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;YACpB,GAAG,CAAC,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC;QAC7B,CAAC;QACD,mBAAmB;QACnB,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,KAAI,CAAC,GAAG,CAAC,GAAG,EAAE,UAAC,GAAe,EAAE,IAAS;gBACrC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACN,OAAO,CAAC,KAAK,CAAC,oBAAkB,IAAI,CAAC,SAAS,CAAC,GAAG,CAAG,EAAE,GAAG,CAAC,CAAC;oBAC5D,MAAM,CAAC,MAAM,CAAC,4BAAoB,CAAC,GAAG,CAAC,CAAC,CAAC;gBAC7C,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACJ,OAAO,CAAC,GAAG,CAAC,iCAA8B,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,cAC/D,IAAI,CAAC,SAAS,CAAC,KAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAG,CAAC,CAAC;oBAC3C,EAAE,CAAC,CAAC,IAAI,IAAI,OAAO,IAAI,CAAC,MAAM,KAAK,SAAS,CAAC,CAAC,CAAC;wBAC3C,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;4BACd,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;wBAC9B,CAAC;wBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;4BACpB,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;wBAC9B,CAAC;wBAAC,IAAI,CAAC,CAAC;4BACJ,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;wBACxB,CAAC;oBACL,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACJ,OAAO,CAAC,GAAG,CAAC,iDAAiD,CAAC,CAAC;wBAC/D,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;oBACzB,CAAC;gBACL,CAAC;YACL,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACP,CAAC;IAEM,+BAAU,GAAjB,UAAkB,OAAe,EAAE,GAAS;QACxC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QAC3C,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE,GAAG,IAAI,OAAO,CAAC,SAAS,EAAE,CAAC,CAAC;IAC3D,CAAC;IAEM,wBAAG,GAAV,UAAW,SAAmB,EAAE,GAAS;QACrC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACnC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;YACN,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;QACrB,CAAC;IACL,CAAC;IAEM,wBAAG,GAAV,UAAW,GAAQ,EAAE,EAAsC;QACvD,GAAG,GAAG,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,CAAC;QACnC,GAAG,GAAG,IAAI,CAAC,uBAAuB,CAAC,GAAG,CAAC,CAAC;QACxC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,eAAe,CAAC,EAAE,CAAC,CAAC,CAAC;QAC/C,OAAO,CAAC,GAAG,CAAC,6CAA2C,IAAI,CAAC,SAAS,CAAC,GAAG,CAAG,CAAC,CAAC;IAClF,CAAC;IAEO,8BAAS,GAAjB,UAAkB,GAAQ;QAA1B,iBAUC;QATG,EAAE,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;YACrB,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,UAAA,UAAU,IAAI,OAAA,KAAI,CAAC,SAAS,CAAC,UAAU,CAAC,EAA1B,CAA0B,CAAC,CAAC;QAC7D,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,GAAG,IAAI,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC;YAC7B,MAAM,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC;QAC1B,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;YACb,MAAM,CAAC,GAAG,CAAC;QACf,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,MAAM,CAAC,IAAI,CAAC;QAChB,CAAC;IACL,CAAC;IAES,oCAAe,GAAzB,UAA0B,EAAsC;QAAhE,iBAUC;QATG,MAAM,CAAC,UAAO,GAAQ,EAAE,IAAwB;;;;;;wBAExC,KAAA,IAAI,CAAA;8BAAC,IAAI;+BAAI,MAAM,EAAE,IAAI;wBAAQ,KAAA,IAAI,CAAC,SAAS,CAAA;wBAAC,qBAAM,EAAE,CAAC,GAAG,CAAC,EAAA;;wBAA7D,6BAA2B,OAAI,GAAE,SAAA,IAAI,GAAW,SAAa,EAAC,QAAG,CAAC;;;;wBAGlE,IAAI,CAAC,IAAI,EAAE,EAAE,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,4BAAoB,CAAC,KAAG,CAAC,EAAE,CAAC,CAAC;wBAChE,MAAM,KAAG,CAAC;;;;aAEjB,CAAC;IACN,CAAC;IAES,2BAAM,GAAhB,UAAiB,GAAQ;QACrB,GAAG,GAAG,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,CAAC;QACnC,GAAG,CAAC,QAAQ,GAAG,GAAG,CAAC;QACnB,IAAI,OAAO,GAAW,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC;aACjC,MAAM,CAAC,UAAA,GAAG,IAAI,OAAA,GAAG,CAAC,GAAG,CAAC,KAAK,SAAS,EAAtB,CAAsB,CAAC;aACrC,GAAG,CAAC,UAAA,GAAG,IAAI,OAAG,GAAG,SAAI,GAAG,CAAC,GAAG,CAAG,EAApB,CAAoB,CAAC;aAChC,IAAI,CAAC,GAAG,CAAC,CAAC;QAEf,OAAO,CAAC,GAAG,CAAC,4CAA0C,OAAO,OAAI,CAAC,CAAC;QACnE,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IACnC,CAAC;IAES,uCAAkB,GAA5B,UAA6B,GAAQ;QACjC,GAAG,CAAC,QAAQ,GAAG,GAAG,CAAC,QAAQ,IAAI,IAAI,CAAC,OAAO,CAAC,QAAQ,IAAI,GAAG,CAAC;QAC5D,GAAG,CAAC,OAAO,GAAG,GAAG,CAAC,OAAO,IAAI,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC;QAClD,GAAG,CAAC,UAAU,GAAG,GAAG,CAAC,UAAU,IAAI,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC;QAC3D,GAAG,CAAC,QAAQ,GAAG,GAAG,CAAC,QAAQ,IAAI,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC;QACrD,GAAG,CAAC,WAAW,GAAG,GAAG,CAAC,WAAW,IAAI,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC;QAC9D,MAAM,CAAC,GAAG,CAAC;IACf,CAAC;IAES,4CAAuB,GAAjC,UAAkC,GAAQ;QACtC,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC;YAC3B,GAAG,CAAC,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC;QAC1C,CAAC;QACD,MAAM,CAAC,GAAG,CAAC;IACf,CAAC;IAED;;OAEG;IACO,+BAAU,GAApB;QACI,IAAI,CAAC,MAAM,GAAW,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QAClD,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,mBAAmB,CAAC,CAAC;IACzC,CAAC;IAEL,iBAAC;AAAD,CAtSA,AAsSC,IAAA;AAtSY,gCAAU","file":"index.js","sourcesContent":["import { Config, DefaultConfig, Entity, Microplum } from \"./model\";\r\n\r\nimport * as _ from \"lodash\";\r\nimport * as seneca from \"seneca\";\r\nimport * as senecaAmqpTransport from \"seneca-amqp-transport\";\r\nimport { NotAllowedPlumError, transformSenecaError } from \"./error\";\r\n\r\n/**\r\n * Seneca interface for updating with non specified seneca methods\r\n */\r\ninterface Seneca extends seneca.Instance {\r\n    /**\r\n     * Close connection to the queue. Use it on closing the app to be sure that no zombie connections have stayed.\r\n     */\r\n    close(): void;\r\n}\r\n\r\n/**\r\n * get current environment value\r\n */\r\nconst currentEnvironment = () => process.env.NODE_ENV || \"production\";\r\n\r\n/**\r\n * Default options value for the microplum\r\n * @type {DefaultConfig}\r\n */\r\nconst DEFAULT_OPTIONS: DefaultConfig = {\r\n    version: 1,\r\n    subversion: 0,\r\n    revision: 0,\r\n    environment: currentEnvironment(),\r\n    pin: [],\r\n    clientPin: `provider:*,version:*,subversion:*,revision:*,role:*,environment:${currentEnvironment()}`,\r\n    seneca: {\r\n        //log: \"standard\",\r\n        transport: {},\r\n        timeout: 10000\r\n    },\r\n};\r\n\r\nexport class SenecaPlum implements Microplum {\r\n\r\n    public seneca: Seneca;\r\n\r\n    constructor(public options: Config) {\r\n        this.options = _.merge(DEFAULT_OPTIONS, options);\r\n        this.options.seneca.transport.msgprefix = this.options.seneca.transport.msgprefix || this.options.app;\r\n        this.initSeneca();\r\n    }\r\n\r\n    public close(): void {\r\n        this.seneca.close();\r\n        console.log(`[Microplum] Closing the connections.`);\r\n    }\r\n\r\n    public listen(): void {\r\n        this.seneca.listen({\r\n            type: \"amqp\",\r\n            pin: this.options.pin,\r\n            url: this.options.amqpUrl,\r\n            exchange: {\r\n                //type: \"topic\",\r\n                name: \"seneca.topic\",\r\n                options: {\r\n                    durable: false, // exchanges remain active when a server restarts\r\n                    autoDelete: true, // exchange is deleted when all queues have finished using it\r\n                }\r\n            },\r\n            deadLetter: {\r\n                /*queue: {\r\n                    name: \"seneca.dlq\"\r\n                },*/\r\n                exchange: {\r\n                    //type: \"topic\",\r\n                    //name: \"seneca.dlx\",\r\n                    options: {\r\n                        durable: true,\r\n                        autoDelete: false\r\n                    }\r\n                }\r\n            },\r\n            listen: {\r\n                /*channel: {\r\n                    \"prefetch\": 1\r\n                },*/\r\n                queues: {\r\n                    //prefix: \"seneca.add\",\r\n                    //separator: \".\",\r\n                    options: {\r\n                        durable: false,\r\n                        arguments: {\r\n                            //\"x-dead-letter-exchange\": \"seneca.dlx\",\r\n                            \"x-message-ttl\": 10000\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            client: {\r\n                /*channel: {\r\n                    prefetch: 1\r\n                },*/\r\n                queues: {\r\n                    //prefix: \"seneca.act\",\r\n                    //separator: \".\",\r\n                    options: {\r\n                        autoDelete: true, // queue is deleted when all consumers have finished using it\r\n                        exclusive: true, // queues may only be accessed by the current connection, and are deleted when that connection closes\r\n                        arguments: {\r\n                            //\"x-dead-letter-exchange\": \"seneca.dlx\",\r\n                            \"x-message-ttl\": 10000\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Set-up seneca connection\r\n     */\r\n    public client(): void {\r\n        this.seneca.client({\r\n            type: 'amqp',\r\n            pin: this.options.clientPin,\r\n            url: this.options.amqpUrl,\r\n            exchange: {\r\n                //type: \"topic\",\r\n                name: \"seneca.topic\",\r\n                options: {\r\n                    durable: false, // exchanges remain active when a server restarts\r\n                    autoDelete: true, // exchange is deleted when all queues have finished using it\r\n                }\r\n            },\r\n            deadLetter: {\r\n                /*queue: {\r\n                 name: \"seneca.dlq\"\r\n                 },*/\r\n                exchange: {\r\n                    //type: \"topic\",\r\n                    //name: \"seneca.dlx\",\r\n                    options: {\r\n                        durable: true,\r\n                        autoDelete: false,\r\n                    }\r\n                }\r\n            },\r\n            listen: {\r\n                /*channel: {\r\n                 \"prefetch\": 1\r\n                 },*/\r\n                queues: {\r\n                    //prefix: \"seneca.add\",\r\n                    //separator: \".\",\r\n                    options: {\r\n                        durable: false,\r\n                        arguments: {\r\n                            //\"x-dead-letter-exchange\": \"seneca.dlx\",\r\n                            \"x-message-ttl\": 10000\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            client: {\r\n                /*channel: {\r\n                 prefetch: 1\r\n                 },*/\r\n                queues: {\r\n                    //prefix: \"seneca.act\",\r\n                    //separator: \".\",\r\n                    options: {\r\n                        autoDelete: true, // queue is deleted when all consumers have finished using it\r\n                        exclusive: true, // queues may only be accessed by the current connection, and are deleted when that connection closes\r\n                        arguments: {\r\n                            //\"x-dead-letter-exchange\": \"seneca.dlx\",\r\n                            \"x-message-ttl\": 10000\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n        });\r\n        console.log(`[Microplum] Registered client for PIN: ${this.options.clientPin}`);\r\n    }\r\n\r\n    public anonymize(pin: any): any {\r\n        pin = Object.assign({}, pin);\r\n        if (pin.input) {\r\n            pin.input = this.anonymize(pin.input);\r\n        }\r\n        if (pin.cvx) {\r\n            pin.cvx = \"***\";\r\n        }\r\n        if (pin.cardNumber) {\r\n            if (pin.cardNumber.length > 12) {\r\n                pin.cardNumber =\r\n                    `${pin.cardNumber.substr(0,4)}****${pin.cardNumber.substr(pin.cardNumber.length - 4)}}`;\r\n            } else if (pin.cardNumber.length > 8) {\r\n                pin.cardNumber = `****${pin.cardNumber.substr(pin.cardNumber.length - 4)}`;\r\n            } else {\r\n                pin.cardNumber = \"****\";\r\n            }\r\n        }\r\n        return pin;\r\n    }\r\n\r\n    public act(pin: any, respond: seneca.ActCallback): void {\r\n        this.addBasicProperties(pin);\r\n        this.addAdditionalProperties(pin);\r\n        this.seneca.act(pin, respond);\r\n    }\r\n\r\n    public actPromise(pin: any, user?: any): Promise<any> {\r\n        console.log(`[Microplum] CALL => ${JSON.stringify(this.anonymize(pin))}`);\r\n        if (!pin.role || typeof pin.role !== \"string\" || !pin.cmd || typeof pin.cmd !== \"string\") {\r\n            throw new NotAllowedPlumError(`[act] there is no service with no string 'role' or 'cmd' parameter: ` +\r\n                `<= ${JSON.stringify(pin)}`);\r\n        } else if (!this.options.roles.includes(pin.role)) {\r\n            throw new NotAllowedPlumError(`[act] the role is not in the list ` +\r\n                `${JSON.stringify(this.options.roles)} <= ${JSON.stringify(pin)}`);\r\n        }\r\n        // add user information\r\n        if (user) {\r\n            pin.user = user;\r\n        }\r\n        if (user && (user.id || user.sub)) {\r\n            pin.userId = (user.id) ? user.id : `${user.iss || \"\"}${user.sub || \"\"}`;\r\n        }\r\n        if (user && user.name) {\r\n            pin.userName = user.name;\r\n        }\r\n        // call the service\r\n        return new Promise((resolve, reject) => {\r\n            this.act(pin, (err: any | null, data: any): void => {\r\n                if (err) {\r\n                    console.error(`[Microplum] <= ${JSON.stringify(pin)}`, err);\r\n                    return reject(transformSenecaError(err));\r\n                } else {\r\n                    console.log(`[Microplum] ANSWER [status:${(data) ? data.status : ''}] <= ${\r\n                        JSON.stringify(this.anonymize(pin))}`);\r\n                    if (data && typeof data.status === \"boolean\") {\r\n                        if (data.status) {\r\n                            return resolve(data.data);\r\n                        } else if (data.error) {\r\n                            return reject(data.error);\r\n                        } else {\r\n                            return reject(data);\r\n                        }\r\n                    } else {\r\n                        console.log(\"[Microplum] ANSWER unknown type: resolving data\");\r\n                        return resolve(data);\r\n                    }\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    public useService(service: Entity, pin?: any): void {\r\n        service.setAct(this.actPromise.bind(this));\r\n        this.use(service.plugin(), pin || service.publicPin());\r\n    }\r\n\r\n    public use(component: Function, pin?: any): void {\r\n        component.bind(this)(this.options);\r\n        if (pin) {\r\n            this.addPin(pin);\r\n        }\r\n    }\r\n\r\n    public add(pin: any, cb: (args: any) => Promise<any | void>): void {\r\n        pin = this.addBasicProperties(pin);\r\n        pin = this.addAdditionalProperties(pin);\r\n        this.seneca.add(pin, this.encloseCallback(cb));\r\n        console.log(`[Microplum] Registered service for PIN: ${JSON.stringify(pin)}`);\r\n    }\r\n\r\n    private escapeDoc(doc: any): any {\r\n        if (Array.isArray(doc)) {\r\n            return doc.map(docElement => this.escapeDoc(docElement));\r\n        } else if (doc && doc.toObject) {\r\n            return doc.toObject();\r\n        } else if (doc) {\r\n            return doc;\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    protected encloseCallback(cb: (args: any) => Promise<any | void>): seneca.AddCallback {\r\n        return async (pin: any, done: seneca.ActCallback): Promise<void> => {\r\n            try {\r\n                done(null, { status: true, data: this.escapeDoc(await cb(pin)) });\r\n                //cb(pin, (err: any, result: any): void => done(null, this.escapeDoc(result)));\r\n            } catch (err) {\r\n                done(null, { status: false, error: transformSenecaError(err) });\r\n                throw err;\r\n            }\r\n        };\r\n    }\r\n\r\n    protected addPin(pin: any): void {\r\n        pin = this.addBasicProperties(pin);\r\n        pin.provider = \"*\";\r\n        let realPin: string = Object.keys(pin)\r\n            .filter(key => pin[key] !== undefined)\r\n            .map(key => `${key}:${pin[key]}`)\r\n            .join(\",\");\r\n\r\n        console.log(`[Microplum] Register listen for PIN: \\\"${realPin}\\\"`);\r\n        this.options.pin.push(realPin);\r\n    }\r\n\r\n    protected addBasicProperties(pin: any): any {\r\n        pin.provider = pin.provider || this.options.provider || \"*\";\r\n        pin.version = pin.version || this.options.version;\r\n        pin.subversion = pin.subversion || this.options.subversion;\r\n        pin.revision = pin.revision || this.options.revision;\r\n        pin.environment = pin.environment || this.options.environment;\r\n        return pin;\r\n    }\r\n\r\n    protected addAdditionalProperties(pin: any): any {\r\n        if (this.options.debugUserId) {\r\n            pin.userId = this.options.debugUserId;\r\n        }\r\n        return pin;\r\n    }\r\n\r\n    /**\r\n     * Set-up seneca with all the middleware libraries.\r\n     */\r\n    protected initSeneca(): void {\r\n        this.seneca = <Seneca>seneca(this.options.seneca);\r\n        this.seneca.use(senecaAmqpTransport);\r\n    }\r\n\r\n}\r\n"]}