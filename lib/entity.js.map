{"version":3,"sources":["lib/entity.ts"],"names":[],"mappings":"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","file":"entity.js","sourcesContent":["import { Entity, HasAct } from \"./model\";\nimport { NotAllowedPlumError, PlumError, ServerPlumError } from \"./error\";\n\nexport abstract class ServiceEntity implements Entity {\n\n    private act: (args: any) => Promise<any>;\n\n    constructor(public name: string, public facade?: any & HasAct, public servicePin?: any) {\n        this.act = (args: object) => {\n            console.log(\"[Microplum] '.act' not set in the service entity. Please use setAct method before.\");\n            throw new ServerPlumError(\"'.act' service not found.\")\n        };\n        if (this.facade) {\n            this.facade.act = this.act;\n        }\n    }\n\n    public setAct(act: (args: any) => Promise<any>) {\n        this.act = act;\n        if (this.facade) {\n            this.facade.act = this.act;\n        }\n    }\n\n    public getAct(user?: any): (args: any) => Promise<any> {\n        return (args) => {\n            if (user) {\n                args.user = args.user || user;\n            }\n            return this.act(args);\n        };\n    }\n\n    public plugin(): Function {\n        let addServices = this.addServices.bind(this);\n        let addDefaultService = this.addDefaultService.bind(this);\n        return function (options) {\n            addServices(this, options);\n            addDefaultService(this, options);\n        }\n    }\n\n    public publicPin(): any {\n        return { role: this.name };\n    }\n\n    protected abstract addServices(seneca: any, options: any): void;\n\n    protected addDefaultService(seneca: any, options: any): void {\n        let pin: any = this.publicPin();\n        seneca.add(pin, this.handleService(\n            async args => {\n                if (args.nonErrorDefault) {\n                    return Promise.resolve();\n                } else {\n                    throw new NotAllowedPlumError(\"Service not found.\", { service: pin, args: args });\n                }\n            }\n        ));\n    }\n\n    protected pin(role: string, cmd: string): any {\n        let pin = Object.assign({}, this.servicePin || {});\n        pin.role = role;\n        pin.cmd = cmd;\n        return pin;\n    }\n\n    protected handleService(cb: Function): Function {\n        let escapeDoc = this.escapeDoc.bind(this);\n        return function (args, done) {\n            cb(args)\n                .then(doc => done(null, { status: true, data: escapeDoc(doc) }))\n                .catch(err => {\n                    if (err instanceof PlumError) {\n                        done(null, { status: false, error: err });\n                    } else {\n                        done(err);\n                    }\n                });\n        };\n    }\n\n    private escapeDoc(doc: any): any {\n        if (Array.isArray(doc)) {\n            return doc.map(docElement => this.escapeDoc(docElement));\n        } else if (doc && doc.toObject) {\n            return doc.toObject();\n        } else if (doc) {\n            return doc;\n        } else {\n            return null;\n        }\n    }\n\n}\n\n/**\n * CRUD for the entity\n */\nexport class RestEntity extends ServiceEntity {\n    protected addServices(seneca: any, options: any): void {\n        this.addGetServices(seneca);\n        this.addStatisticalServices(seneca);\n        this.addModifyServices(seneca);\n    }\n\n    protected addGetServices(seneca: any): void {\n        if (this.facade.find) {\n            seneca.add(this.pin(this.name, \"find\"), this.handleService(\n                async args => this.facade.find(args.conditions)\n            ));\n        }\n        if (this.facade.findOne) {\n            seneca.add(this.pin(this.name, \"findOne\"), this.handleService(\n                async args => this.facade.findOne(args.conditions)\n            ));\n        }\n        if (this.facade.findById) {\n            seneca.add(this.pin(this.name, \"findById\"), this.handleService(\n                async args => this.facade.findById(args.id)\n            ));\n        }\n    }\n\n    protected addStatisticalServices(seneca: any): void {\n        if (this.facade.count) {\n            seneca.add(this.pin(this.name, \"count\"), this.handleService(\n                async args => this.facade.count(args.conditions)\n            ));\n        }\n    }\n\n    protected addModifyServices(seneca: any): void {\n        if (this.facade.create) {\n            seneca.add(this.pin(this.name, \"create\"), this.handleService(\n                async args => this.facade.create(args.input)\n            ));\n        }\n        if (this.facade.update) {\n            seneca.add(this.pin(this.name, \"update\"), this.handleService(\n                async args => this.facade.update(args.conditions, args.input)\n            ));\n        }\n        if (this.facade.remove) {\n            seneca.add(this.pin(this.name, \"remove\"), this.handleService(\n                async args => this.facade.remove(args.id)\n            ));\n        }\n    }\n}\n"]}