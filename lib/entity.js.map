{"version":3,"sources":["lib/entity.ts"],"names":[],"mappings":"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","file":"entity.js","sourcesContent":["import { Entity, HasAct, RestFacade } from \"./model\";\nimport { PlumError, ServerPlumError } from \"./error\";\n\n\nconst invalidActFun: (args: { [key: string]: any }) => Promise<any> = (args: { [key: string]: any }): Promise<any> => {\n    console.log(\"[Microplum] '.act' not set in the service entity. Please use setAct method before.\");\n    throw new ServerPlumError(\"'act' service not set.\");\n};\n\n/**\n * Facade class that can be extended with specific methods.\n */\nexport class PlumFacade implements HasAct {\n\n    public act: (args: { [key: string]: any }) => Promise<any>;\n    public args: { [key: string]: any };\n\n    constructor(act?: (args: any) => Promise<any>, args?: { [key: string]: any }) {\n        this.act = (act) ? act : invalidActFun;\n        this.args = (args) ? args : {};\n    }\n}\n\nexport abstract class ServiceEntity<F extends PlumFacade> implements Entity, HasAct {\n\n    public act: (args: { [key: string]: any }) => Promise<any>;\n    protected emptyFacade: F;\n\n    constructor(public name: string,\n                public FacadeClass?: new (act?: (args: any) => Promise<any>, args?: { [key: string]: any }) => F,\n                public servicePin?: any) {\n        this.act = invalidActFun;\n        this.emptyFacade = (this.FacadeClass) ? new this.FacadeClass() : <F>new PlumFacade();\n        /*if (this.facade) {\n         this.facade.act = this.act;\n         }*/\n    }\n\n    public setAct(act: (args: { [key: string]: any }) => Promise<any>) {\n        this.act = act;\n        /*if (this.facade) {\n         this.facade.act = this.act;\n         }*/\n    }\n\n    public getAct(user?: any): (args: { [key: string]: any }) => Promise<any> {\n        return (args) => {\n            if (user) {\n                args.user = args.user || user;\n            }\n            return this.act(args);\n        };\n    }\n\n    public createFacade(args: { [key: string]: any } = {}): F {\n        return new this.FacadeClass(this.act, args);\n    }\n\n    public plugin(): Function {\n        let addServices = this.addServices.bind(this);\n        //let addDefaultService = this.addDefaultService.bind(this);\n        return function (options) {\n            addServices(this, options);\n            //addDefaultService(this, options);\n        }\n    }\n\n    public publicPin(): any {\n        return { role: this.name };\n    }\n\n    protected abstract addServices(seneca: any, options: any): void;\n\n    /*protected addDefaultService(seneca: any, options: any): void {\n     let pin: any = this.pin(this.name, \"*\");\n     seneca.add(pin, this.handleService(\n     async args => {\n     console.log(`WARNING: [Microplum] Method is not registered for PIN:${JSON.stringify(pin)}`);\n     if (args.nonErrorDefault) {\n     return Promise.resolve();\n     } else {\n     throw new NotAllowedPlumError(\"Service not found.\", { service: pin, args: args });\n     }\n     }\n     ));\n     }*/\n\n    protected pin(role: string, cmd: string, additionalArgs: {} = {}): any {\n        let pin = Object.assign({}, this.servicePin || {}, additionalArgs);\n        pin.role = role;\n        pin.cmd = cmd;\n        return pin;\n    }\n\n    protected handleService(cb: Function): Function {\n        let escapeDoc = this.escapeDoc.bind(this);\n        return function (args, done) {\n            cb(args)\n                .then(doc => done(null, { status: true, data: escapeDoc(doc) }))\n                .catch(err => {\n                    if (err instanceof PlumError) {\n                        done(null, { status: false, error: err });\n                    } else {\n                        done(err);\n                    }\n                });\n        };\n    }\n\n    private escapeDoc(doc: any): any {\n        if (Array.isArray(doc)) {\n            return doc.map(docElement => this.escapeDoc(docElement));\n        } else if (doc && doc.toObject) {\n            return doc.toObject();\n        } else if (doc) {\n            return doc;\n        } else {\n            return null;\n        }\n    }\n\n}\n\n/**\n * CRUD for the entity\n */\nexport class RestEntity extends ServiceEntity<RestFacade<any> & PlumFacade> {\n    protected addServices(seneca: any, options: any): void {\n        this.addGetServices(seneca);\n        this.addStatisticalServices(seneca);\n        this.addModifyServices(seneca);\n    }\n\n    protected addGetServices(seneca: any): void {\n        if (this.emptyFacade.find) {\n            seneca.add(this.pin(this.name, \"find\", { conditions: \"*\" }), this.handleService(\n                async args => this.createFacade(args).find(args.conditions)\n            ));\n        }\n        if (this.emptyFacade.findOne) {\n            seneca.add(this.pin(this.name, \"findOne\", { conditions: \"*\" }), this.handleService(\n                async args => this.createFacade(args).findOne(args.conditions)\n            ));\n        }\n        if (this.emptyFacade.findById) {\n            seneca.add(this.pin(this.name, \"find\", { id: \"*\" }), this.handleService(\n                async args => this.createFacade(args).findById(args.id)\n            ));\n        }\n    }\n\n    protected addStatisticalServices(seneca: any): void {\n        if (this.emptyFacade.count) {\n            seneca.add(this.pin(this.name, \"count\", { conditions: \"*\" }), this.handleService(\n                async args => this.createFacade(args).count(args.conditions)\n            ));\n        }\n    }\n\n    protected addModifyServices(seneca: any): void {\n        if (this.emptyFacade.create) {\n            seneca.add(this.pin(this.name, \"create\", { input: \"*\" }), this.handleService(\n                async args => this.createFacade(args).create(args.input)\n            ));\n        }\n        if (this.emptyFacade.update) {\n            seneca.add(this.pin(this.name, \"update\", { conditions: \"*\", input: \"*\" }), this.handleService(\n                async args => this.createFacade(args).update(args.conditions, args.input)\n            ));\n        }\n        if (this.emptyFacade.updateById) {\n            seneca.add(this.pin(this.name, \"update\", { id: \"*\", input: \"*\" }), this.handleService(\n                async args => this.createFacade(args).updateById(args.id, args.input)\n            ));\n        }\n        if (this.emptyFacade.remove) {\n            seneca.add(this.pin(this.name, \"remove\", { conditions: \"*\" }), this.handleService(\n                async args => this.createFacade(args).remove(args.conditions)\n            ));\n        }\n        if (this.emptyFacade.removeById) {\n            seneca.add(this.pin(this.name, \"remove\", { id: \"*\" }), this.handleService(\n                async args => this.createFacade(args).removeById(args.id)\n            ));\n        }\n        if (this.emptyFacade.clean) {\n            seneca.add(this.pin(this.name, \"clean\"), this.handleService(\n                async args => this.createFacade(args).clean()\n            ));\n        }\n    }\n}\n"]}